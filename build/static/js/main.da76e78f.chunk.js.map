{"version":3,"sources":["characters.js","shuffle.js","CharacterButtons.js","PasswordLength.js","App.js","index.js","logo.svg"],"names":["specialCharacters","character","selected","numericCharacters","lowerCaseCharacters","upperCaseCharacters","shuffle","arr","tempValue","randomIndex","currentIndex","length","Math","floor","random","CharacterButtons","props","characters","name","liftState","useState","selectedCharacterObjects","setSelectedCharacterObjects","handleSelectClick","bool","selectAllCharacters","map","charObj","selectedCharacters","filter","shuffledCharacters","useEffect","className","onClick","key","selectedCharacterObject","index","findIndex","updatedSelectedCharacterObject","splice","selectedCharacterObjectsCopy","handleCharacterClick","PasswordLength","strength","setStrength","value","setValue","htmlFor","type","min","max","id","onChange","e","target","App","copyButtonText","setCopyButtonText","password","setPassword","passwordLength","setPasswordLength","scrollHeight","setScrollHeight","setSelectedCharacters","selectedLowerCaseCharacters","setSelectedLowerCaseCharacters","selectedNumericCharacters","setSelectedNumericCharacters","selectedSpecialCharacters","setSelectedSpecialCharacters","selectedUpperCaseCharacters","setSelectedUpperCaseCharacters","passwordRef","useRef","date","Date","generatePassword","i","randomCharacter","push","join","shuffledSelectedCharacters","current","alt","src","logo","readOnly","ref","style","height","select","document","execCommand","focus","setTimeout","getFullYear","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"iMACaA,EAAoB,CAC7B,CACIC,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,KACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLC,EAAoB,CAC7B,CACIF,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLE,EAAsB,CAC/B,CACIH,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLG,EAAsB,CAC/B,CACIJ,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,ICxUHI,EAxBC,SAAAC,GAQZ,IANA,IAEIC,EAEAC,EAJAC,EAAeH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","file":"static/js/main.da76e78f.chunk.js","sourcesContent":["// Array of special characters to be included in password\nexport const specialCharacters = [\n    {\n        character: '@',\n        selected: true\n    },\n    {\n        character: '%',\n        selected: true\n    },\n    {\n        character: '+',\n        selected: true\n    },\n    {\n        character: '\\\\',\n        selected: true\n    },\n    {\n        character: '/',\n        selected: true\n    },\n    {\n        character: \"'\",\n        selected: true\n    },\n    {\n        character: '!',\n        selected: true\n    },\n    {\n        character: '#',\n        selected: true\n    },\n    {\n        character: '$',\n        selected: true\n    },\n    {\n        character: '^',\n        selected: true\n    },\n    {\n        character: '?',\n        selected: true\n    },\n    {\n        character: ':',\n        selected: true\n    },\n    {\n        character: ',',\n        selected: true\n    },\n    {\n        character: ')',\n        selected: true\n    },\n    {\n        character: '(',\n        selected: true\n    },\n    {\n        character: '}',\n        selected: true\n    },\n    {\n        character: '{',\n        selected: true\n    },\n    {\n        character: ']',\n        selected: true\n    },\n    {\n        character: '[',\n        selected: true\n    },\n    {\n        character: '~',\n        selected: true\n    },\n    {\n        character: '-',\n        selected: true\n    },\n    {\n        character: '_',\n        selected: true\n    },\n    {\n        character: '.',\n        selected: true\n    }\n]\n\n// Array of numeric characters to be included in password\nexport const numericCharacters = [\n    {\n        character: '0',\n        selected: true\n    },\n    {\n        character: '1',\n        selected: true\n    },\n    {\n        character: '2',\n        selected: true\n    },\n    {\n        character: '3',\n        selected: true\n    },\n    {\n        character: '4',\n        selected: true\n    },\n    {\n        character: '5',\n        selected: true\n    },\n    {\n        character: '6',\n        selected: true\n    },\n    {\n        character: '7',\n        selected: true\n    },\n    {\n        character: '8',\n        selected: true\n    },\n    {\n        character: '9',\n        selected: true\n    }\n]\n\n// Array of lowercase characters to be included in password\nexport const lowerCaseCharacters = [\n    {\n        character: 'a',\n        selected: true\n    },\n    {\n        character: 'b',\n        selected: true\n    },\n    {\n        character: 'c',\n        selected: true\n    },\n    {\n        character: 'd',\n        selected: true\n    },\n    {\n        character: 'e',\n        selected: true\n    },\n    {\n        character: 'f',\n        selected: true\n    },\n    {\n        character: 'g',\n        selected: true\n    },\n    {\n        character: 'h',\n        selected: true\n    },\n    {\n        character: 'i',\n        selected: true\n    },\n    {\n        character: 'j',\n        selected: true\n    },\n    {\n        character: 'k',\n        selected: true\n    },\n    {\n        character: 'l',\n        selected: true\n    },\n    {\n        character: 'm',\n        selected: true\n    },\n    {\n        character: 'n',\n        selected: true\n    },\n    {\n        character: 'o',\n        selected: true\n    },\n    {\n        character: 'p',\n        selected: true\n    },\n    {\n        character: 'q',\n        selected: true\n    },\n    {\n        character: 'r',\n        selected: true\n    },\n    {\n        character: 's',\n        selected: true\n    },\n    {\n        character: 't',\n        selected: true\n    },\n    {\n        character: 'u',\n        selected: true\n    },\n    {\n        character: 'v',\n        selected: true\n    },\n    {\n        character: 'w',\n        selected: true\n    },\n    {\n        character: 'x',\n        selected: true\n    },\n    {\n        character: 'y',\n        selected: true\n    },\n    {\n        character: 'z',\n        selected: true\n    }\n]\n\n// Array of uppercase characters to be included in password\nexport const upperCaseCharacters = [\n    {\n        character: 'A',\n        selected: true\n    },\n    {\n        character: 'B',\n        selected: true\n    },\n    {\n        character: 'C',\n        selected: true\n    },\n    {\n        character: 'D',\n        selected: true\n    },\n    {\n        character: 'E',\n        selected: true\n    },\n    {\n        character: 'F',\n        selected: true\n    },\n    {\n        character: 'G',\n        selected: true\n    },\n    {\n        character: 'H',\n        selected: true\n    },\n    {\n        character: 'I',\n        selected: true\n    },\n    {\n        character: 'J',\n        selected: true\n    },\n    {\n        character: 'K',\n        selected: true\n    },\n    {\n        character: 'L',\n        selected: true\n    },\n    {\n        character: 'M',\n        selected: true\n    },\n    {\n        character: 'N',\n        selected: true\n    },\n    {\n        character: 'O',\n        selected: true\n    },\n    {\n        character: 'P',\n        selected: true\n    },\n    {\n        character: 'Q',\n        selected: true\n    },\n    {\n        character: 'R',\n        selected: true\n    },\n    {\n        character: 'S',\n        selected: true\n    },\n    {\n        character: 'T',\n        selected: true\n    },\n    {\n        character: 'U',\n        selected: true\n    },\n    {\n        character: 'V',\n        selected: true\n    },\n    {\n        character: 'W',\n        selected: true\n    },\n    {\n        character: 'X',\n        selected: true\n    },\n    {\n        character: 'Y',\n        selected: true\n    },\n    {\n        character: 'Z',\n        selected: true\n    }   \n]\n","const shuffle = arr => {\n    // keep track of current index\n    let currentIndex = arr.length\n    // temporary value\n    let tempValue\n    // random index\n    let randomIndex\n\n    while (currentIndex !== 0) {\n        // get a random number\n        randomIndex = Math.floor(Math.random() * currentIndex)\n\n        // decrement currentIndex\n        currentIndex--\n\n        // swap values\n        tempValue = arr[currentIndex]\n        arr[currentIndex] = arr[randomIndex]\n        arr[randomIndex] = tempValue\n    }\n\n    return arr\n}\n\nexport default shuffle\n","// import dependencies\nimport React, { useEffect, useState } from 'react'\nimport shuffle from './shuffle'\n\nconst CharacterButtons = props => {\n    // destructure props\n    const {\n        characters,\n        name,\n        liftState\n    } = props\n\n    // state hook variables\n    const [selectedCharacterObjects, setSelectedCharacterObjects] = useState(characters)\n\n    const handleCharacterClick = (selectedCharacterObject) => {\n        // find index position of selected character\n        const index = selectedCharacterObjects.findIndex(charObj => charObj.character === selectedCharacterObject.character)\n\n        // flip selected value \n        const updatedSelectedCharacterObject = {\n            character: selectedCharacterObject.character,\n            selected: !selectedCharacterObject.selected\n        }\n\n        // find and replace selected character\n        selectedCharacterObjects.splice(index, 1, updatedSelectedCharacterObject)\n\n        // filter character objects\n        const filteredCharacterObjects = selectedCharacterObjects.filter(charObj => charObj.selected === true)\n\n        // extract character property from filtered character objects\n        const selectedCharacters = filteredCharacterObjects.map(charObj => charObj.character)\n        // shuffle selected characters\n        const shuffledCharacters = shuffle(selectedCharacters)\n        // lift state\n        liftState(shuffledCharacters)\n\n        // create copy of selected characters to force rerender\n        const selectedCharacterObjectsCopy = selectedCharacterObjects.map(charObj => charObj)\n        // update state\n        setSelectedCharacterObjects(selectedCharacterObjectsCopy)\n    }\n\n    const handleSelectClick = bool => {\n        // apply changes to all characters\n        const selectAllCharacters = selectedCharacterObjects.map(charObj => ({\n            ...charObj,\n            selected: bool\n        }))\n\n        // update state\n        setSelectedCharacterObjects(selectAllCharacters)\n\n        // filter character objects\n        const filteredCharacterObjects = selectAllCharacters.filter(charObj => charObj.selected === true)\n\n        // extract character property from filtered character objects\n        const selectedCharacters = filteredCharacterObjects.map(charObj => charObj.character)\n\n        // shuffle selected characters\n        const shuffledCharacters = shuffle(selectedCharacters)\n\n        // lift state\n        liftState(shuffledCharacters)\n    }\n\n    // invoke click handler after component mounts\n    useEffect(() => {\n        handleSelectClick(true)\n    }, [])\n\n    return (\n        <div className=\"row character-buttons\">\n            <div className=\"col-12\">\n                <div className=\"row my-3\">\n                    <div className=\"col-xs-12 col-sm-6 text-xs-center text-sm-left\">\n                        <h5 className=\"card-title\">{name} Characters</h5>\n                    </div>\n                    <div className=\"col-xs-12 col-sm-6 text-xs-center text-sm-right\">\n                        <button className=\"btn btn-secondary mr-2\" onClick={() => handleSelectClick(true)}>\n                            Select All\n                        </button>\n                        <button className=\"btn btn-outline-secondary ml-2\" onClick={() => handleSelectClick(false)}>\n                            Deselect All\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-12 text-center\">\n                <div className=\"form-group\">\n                    {selectedCharacterObjects && selectedCharacterObjects.map(charObj => (\n                        <button className={`btn character ${charObj.selected ? 'btn-secondary' : 'btn-outline-secondary'}`} key={charObj.character} onClick={() => handleCharacterClick(charObj)}>\n                            {charObj.character}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterButtons\n","// import dependencies\nimport React, { useState } from 'react'\n\nconst PasswordLength = props => {\n    // state hook varialbes\n    const [strength, setStrength] = useState('text-success')\n    const [value, setValue] = useState(16)\n\n    // destructure props\n    const { liftState } = props\n\n    const handleChange = e => {\n        // destructure event\n        const { value } = e.target\n\n        // lift state\n        liftState(value)\n\n        // update state\n        setValue(value)\n        if (value < 12) {\n            setStrength('text-danger')\n        } else if (value < 16) {\n            setStrength('text-warning')\n        } else {\n            setStrength('text-success')\n        }\n    }\n\n    return (\n        <div className=\"row my-4 password-length\">\n            <div className=\"col text-left\">\n                <label htmlFor=\"password-length\">Password Length: <span className={strength}>{value}</span></label>\n                <input type=\"range\" className=\"custom-range\" min=\"8\" max=\"128\" id=\"password-length\" onChange={handleChange} value={value} />\n            </div>\n        </div>\n    )\n}\n\nexport default PasswordLength\n","// import dependencies\nimport React, {\n\tuseEffect,\n\tuseRef,\n\tuseState\n} from 'react'\nimport {\n\tlowerCaseCharacters,\n\tnumericCharacters,\n\tspecialCharacters,\n\tupperCaseCharacters,\n} from './characters'\nimport shuffle from './shuffle'\n\n// import components\nimport CharacterButtons from './CharacterButtons'\nimport PasswordLength from './PasswordLength'\n\n// import images\nimport logo from './logo.svg'\n\n// import styles\nimport './styles.css'\n\nconst App = () => {\n\t// state hook variables\n\tconst [copyButtonText, setCopyButtonText] = useState('Copy to Clipboard')\n\tconst [password, setPassword] = useState('')\n\tconst [passwordLength, setPasswordLength] = useState(16)\n\tconst [scrollHeight, setScrollHeight] = useState(0)\n\tconst [selectedCharacters, setSelectedCharacters] = useState([])\n\tconst [selectedLowerCaseCharacters, setSelectedLowerCaseCharacters] = useState([])\n\tconst [selectedNumericCharacters, setSelectedNumericCharacters] = useState([])\n\tconst [selectedSpecialCharacters, setSelectedSpecialCharacters] = useState([])\n\tconst [selectedUpperCaseCharacters, setSelectedUpperCaseCharacters] = useState([])\n\n\t// ref hook varialbes\n\tconst passwordRef = useRef(null);\n\n\t// utility variables\n\tconst date = new Date()\n\n\tconst handleCopyClick = e => {\n\t\t// select the contents of the password text area \n\t\tpasswordRef.current.select()\n\n\t\t// replace the clipboard's current content\n\t\tdocument.execCommand('copy')\n\n\t\t// maintain focus on button\n\t\te.target.focus()\n\n\t\t// update state\n\t\tsetCopyButtonText('Copied!')\n\t\tsetTimeout(() => {\n\t\t\tsetCopyButtonText('Copy to Clipboard')\n\t\t  }, 5000)\n\t}\n\n\tconst handleGenerateClick = () => generatePassword()\n\n\tconst generatePassword = () => {\n\t\tlet password = []\n\n\t\tfor (let i = 0; i < passwordLength; i++) {\n\t\t\t// generate a random number\n\t\t\tconst randomIndex = Math.floor(Math.random() * selectedCharacters.length)\n\n\t\t\t// select element from selected characters\n\t\t\tconst randomCharacter = selectedCharacters[randomIndex]\n\n\t\t\t// add selected character to password\n\t\t\tpassword.push(randomCharacter)\n\t\t}\n\n\t\tsetPassword(password.join(''))\n\t}\n\n\t// update selected characters when user input changes\n\tuseEffect(() => {\n\t\t// shuffle selected characters\n\t\tconst shuffledSelectedCharacters = shuffle([\n\t\t\t...selectedLowerCaseCharacters,\n\t\t\t...selectedNumericCharacters,\n\t\t\t...selectedSpecialCharacters,\n\t\t\t...selectedUpperCaseCharacters\n\t\t])\n\n\t\t// update state\n\t\tsetSelectedCharacters(shuffledSelectedCharacters)\n\t}, [selectedLowerCaseCharacters, selectedNumericCharacters, selectedSpecialCharacters, selectedUpperCaseCharacters])\n\n\t// update password when user input changes\n\tuseEffect(() => {\n\t\tgeneratePassword()\n\t\tsetCopyButtonText('Copy to Clipboard')\n\t}, [passwordLength, selectedCharacters])\n\n\t// update scroll height when password changes\n\tuseEffect(() => {\n\t\tsetScrollHeight(passwordRef.current.scrollHeight)\n\t}, [password])\n\n\treturn (\n\t\t<div id=\"app\">\n\t\t\t<div className=\"container my-5\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t\t\t<div className=\"card-header\">\n\t\t\t\t\t\t\t\t<img alt=\"logo\" className=\"logo\" src={logo} />\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Secure Password Generator</h5>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<div className=\"row generate-password\">\n\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Your New Password:</h5>\n\t\t\t\t\t\t\t\t\t\t<textarea readOnly ref={passwordRef} value={password} style={{ height: scrollHeight }}></textarea>\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary mx-2 my-3\" onClick={handleGenerateClick}>\n\t\t\t\t\t\t\t\t\t\t\tGenerate Password\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-outline-primary mx-2 my-3\" onClick={handleCopyClick}>\n\t\t\t\t\t\t\t\t\t\t\t{copyButtonText}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<PasswordLength liftState={setPasswordLength} />\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={lowerCaseCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Lower Case\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedLowerCaseCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={upperCaseCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Upper Case\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedUpperCaseCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={numericCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Numeric\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedNumericCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={specialCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Special\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedSpecialCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"card-footer text-muted\">\n\t\t\t\t\t\t\t\t© {date.getFullYear()} IC, LLC\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.02852ab0.svg\";"],"sourceRoot":""}