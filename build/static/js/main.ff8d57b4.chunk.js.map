{"version":3,"sources":["characters.js","shuffle.js","CharacterButtons.js","PasswordLength.js","App.js","index.js","logo.svg"],"names":["specialCharacters","character","selected","numericCharacters","lowerCaseCharacters","upperCaseCharacters","shuffle","arr","tempValue","randomIndex","currentIndex","length","Math","floor","random","CharacterButtons","props","characters","name","liftState","useState","disableDeselectAll","setDisableDeselectAll","disableSelectAll","setDisableSelectAll","selectedCharacterObjects","setSelectedCharacterObjects","handleSelectClick","bool","selectAllCharacters","map","charObj","selectedCharacters","filter","shuffledCharacters","useEffect","filteredSelectedCharacters","className","disabled","onClick","key","selectedCharacterObject","index","findIndex","updatedSelectedCharacterObject","splice","selectedCharacterObjectsCopy","handleCharacterClick","PasswordLength","strength","setStrength","numberValue","setNumberValue","rangeValue","setRangeValue","htmlFor","min","max","onBlur","e","value","target","onChange","type","id","App","copyButtonText","setCopyButtonText","password","setPassword","passwordLength","setPasswordLength","scrollHeight","setScrollHeight","setSelectedCharacters","selectedLowerCaseCharacters","setSelectedLowerCaseCharacters","selectedNumericCharacters","setSelectedNumericCharacters","selectedSpecialCharacters","setSelectedSpecialCharacters","selectedUpperCaseCharacters","setSelectedUpperCaseCharacters","passwordRef","useRef","date","Date","generatePassword","i","randomCharacter","push","join","shuffledSelectedCharacters","current","alt","src","logo","readOnly","ref","style","height","select","document","execCommand","focus","setTimeout","getFullYear","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"iMACaA,EAAoB,CAC7B,CACIC,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,KACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLC,EAAoB,CAC7B,CACIF,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLE,EAAsB,CAC/B,CACIH,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,IAKLG,EAAsB,CAC/B,CACIJ,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,GAEd,CACID,UAAW,IACXC,UAAU,ICxUHI,EAxBC,SAAAC,GAQZ,IANA,IAEIC,EAEAC,EAJAC,EAAeH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","file":"static/js/main.ff8d57b4.chunk.js","sourcesContent":["// Array of special characters to be included in password\nexport const specialCharacters = [\n    {\n        character: '@',\n        selected: true\n    },\n    {\n        character: '%',\n        selected: true\n    },\n    {\n        character: '+',\n        selected: true\n    },\n    {\n        character: '\\\\',\n        selected: true\n    },\n    {\n        character: '/',\n        selected: true\n    },\n    {\n        character: \"'\",\n        selected: true\n    },\n    {\n        character: '!',\n        selected: true\n    },\n    {\n        character: '#',\n        selected: true\n    },\n    {\n        character: '$',\n        selected: true\n    },\n    {\n        character: '^',\n        selected: true\n    },\n    {\n        character: '?',\n        selected: true\n    },\n    {\n        character: ':',\n        selected: true\n    },\n    {\n        character: ',',\n        selected: true\n    },\n    {\n        character: ')',\n        selected: true\n    },\n    {\n        character: '(',\n        selected: true\n    },\n    {\n        character: '}',\n        selected: true\n    },\n    {\n        character: '{',\n        selected: true\n    },\n    {\n        character: ']',\n        selected: true\n    },\n    {\n        character: '[',\n        selected: true\n    },\n    {\n        character: '~',\n        selected: true\n    },\n    {\n        character: '-',\n        selected: true\n    },\n    {\n        character: '_',\n        selected: true\n    },\n    {\n        character: '.',\n        selected: true\n    }\n]\n\n// Array of numeric characters to be included in password\nexport const numericCharacters = [\n    {\n        character: '0',\n        selected: true\n    },\n    {\n        character: '1',\n        selected: true\n    },\n    {\n        character: '2',\n        selected: true\n    },\n    {\n        character: '3',\n        selected: true\n    },\n    {\n        character: '4',\n        selected: true\n    },\n    {\n        character: '5',\n        selected: true\n    },\n    {\n        character: '6',\n        selected: true\n    },\n    {\n        character: '7',\n        selected: true\n    },\n    {\n        character: '8',\n        selected: true\n    },\n    {\n        character: '9',\n        selected: true\n    }\n]\n\n// Array of lowercase characters to be included in password\nexport const lowerCaseCharacters = [\n    {\n        character: 'a',\n        selected: true\n    },\n    {\n        character: 'b',\n        selected: true\n    },\n    {\n        character: 'c',\n        selected: true\n    },\n    {\n        character: 'd',\n        selected: true\n    },\n    {\n        character: 'e',\n        selected: true\n    },\n    {\n        character: 'f',\n        selected: true\n    },\n    {\n        character: 'g',\n        selected: true\n    },\n    {\n        character: 'h',\n        selected: true\n    },\n    {\n        character: 'i',\n        selected: true\n    },\n    {\n        character: 'j',\n        selected: true\n    },\n    {\n        character: 'k',\n        selected: true\n    },\n    {\n        character: 'l',\n        selected: true\n    },\n    {\n        character: 'm',\n        selected: true\n    },\n    {\n        character: 'n',\n        selected: true\n    },\n    {\n        character: 'o',\n        selected: true\n    },\n    {\n        character: 'p',\n        selected: true\n    },\n    {\n        character: 'q',\n        selected: true\n    },\n    {\n        character: 'r',\n        selected: true\n    },\n    {\n        character: 's',\n        selected: true\n    },\n    {\n        character: 't',\n        selected: true\n    },\n    {\n        character: 'u',\n        selected: true\n    },\n    {\n        character: 'v',\n        selected: true\n    },\n    {\n        character: 'w',\n        selected: true\n    },\n    {\n        character: 'x',\n        selected: true\n    },\n    {\n        character: 'y',\n        selected: true\n    },\n    {\n        character: 'z',\n        selected: true\n    }\n]\n\n// Array of uppercase characters to be included in password\nexport const upperCaseCharacters = [\n    {\n        character: 'A',\n        selected: true\n    },\n    {\n        character: 'B',\n        selected: true\n    },\n    {\n        character: 'C',\n        selected: true\n    },\n    {\n        character: 'D',\n        selected: true\n    },\n    {\n        character: 'E',\n        selected: true\n    },\n    {\n        character: 'F',\n        selected: true\n    },\n    {\n        character: 'G',\n        selected: true\n    },\n    {\n        character: 'H',\n        selected: true\n    },\n    {\n        character: 'I',\n        selected: true\n    },\n    {\n        character: 'J',\n        selected: true\n    },\n    {\n        character: 'K',\n        selected: true\n    },\n    {\n        character: 'L',\n        selected: true\n    },\n    {\n        character: 'M',\n        selected: true\n    },\n    {\n        character: 'N',\n        selected: true\n    },\n    {\n        character: 'O',\n        selected: true\n    },\n    {\n        character: 'P',\n        selected: true\n    },\n    {\n        character: 'Q',\n        selected: true\n    },\n    {\n        character: 'R',\n        selected: true\n    },\n    {\n        character: 'S',\n        selected: true\n    },\n    {\n        character: 'T',\n        selected: true\n    },\n    {\n        character: 'U',\n        selected: true\n    },\n    {\n        character: 'V',\n        selected: true\n    },\n    {\n        character: 'W',\n        selected: true\n    },\n    {\n        character: 'X',\n        selected: true\n    },\n    {\n        character: 'Y',\n        selected: true\n    },\n    {\n        character: 'Z',\n        selected: true\n    }   \n]\n","const shuffle = arr => {\n    // keep track of current index\n    let currentIndex = arr.length\n    // temporary value\n    let tempValue\n    // random index\n    let randomIndex\n\n    while (currentIndex !== 0) {\n        // get a random number\n        randomIndex = Math.floor(Math.random() * currentIndex)\n\n        // decrement currentIndex\n        currentIndex--\n\n        // swap values\n        tempValue = arr[currentIndex]\n        arr[currentIndex] = arr[randomIndex]\n        arr[randomIndex] = tempValue\n    }\n\n    return arr\n}\n\nexport default shuffle\n","// import dependencies\nimport React, { useEffect, useState } from 'react'\nimport shuffle from './shuffle'\n\nconst CharacterButtons = props => {\n    // destructure props\n    const {\n        characters,\n        name,\n        liftState\n    } = props\n\n    // state hook variables\n    const [disableDeselectAll, setDisableDeselectAll] = useState(false)\n    const [disableSelectAll, setDisableSelectAll] = useState(true)\n    const [selectedCharacterObjects, setSelectedCharacterObjects] = useState(characters)\n\n    const handleCharacterClick = (selectedCharacterObject) => {\n        // find index position of selected character\n        const index = selectedCharacterObjects.findIndex(charObj => charObj.character === selectedCharacterObject.character)\n\n        // flip selected value \n        const updatedSelectedCharacterObject = {\n            character: selectedCharacterObject.character,\n            selected: !selectedCharacterObject.selected\n        }\n\n        // find and replace selected character\n        selectedCharacterObjects.splice(index, 1, updatedSelectedCharacterObject)\n\n        // filter character objects\n        const filteredCharacterObjects = selectedCharacterObjects.filter(charObj => charObj.selected === true)\n\n        // extract character property from filtered character objects\n        const selectedCharacters = filteredCharacterObjects.map(charObj => charObj.character)\n        // shuffle selected characters\n        const shuffledCharacters = shuffle(selectedCharacters)\n        // lift state\n        liftState(shuffledCharacters)\n\n        // create copy of selected characters to force rerender\n        const selectedCharacterObjectsCopy = selectedCharacterObjects.map(charObj => charObj)\n        // update state\n        setSelectedCharacterObjects(selectedCharacterObjectsCopy)\n    }\n\n    const handleSelectClick = bool => {\n        // apply changes to all characters\n        const selectAllCharacters = selectedCharacterObjects.map(charObj => ({\n            ...charObj,\n            selected: bool\n        }))\n\n        // update state\n        setSelectedCharacterObjects(selectAllCharacters)\n\n        // filter character objects\n        const filteredCharacterObjects = selectAllCharacters.filter(charObj => charObj.selected === true)\n\n        // extract character property from filtered character objects\n        const selectedCharacters = filteredCharacterObjects.map(charObj => charObj.character)\n\n        // shuffle selected characters\n        const shuffledCharacters = shuffle(selectedCharacters)\n\n        // lift state\n        liftState(shuffledCharacters)\n    }\n\n    // invoke click handler after component mounts\n    useEffect(() => {\n        handleSelectClick(true)\n    }, [])\n\n    // determine disabled status when selected characters change\n    useEffect(() => {\n        // filter selected characters\n        const filteredSelectedCharacters = selectedCharacterObjects.filter(charObj => charObj.selected === true)\n        \n        // update state\n        if (filteredSelectedCharacters.length === 0) {\n            setDisableDeselectAll(true)\n            setDisableSelectAll(false)\n        } else if (filteredSelectedCharacters.length === characters.length) {\n            setDisableDeselectAll(false)\n            setDisableSelectAll(true)\n        } else {\n            setDisableDeselectAll(false)\n            setDisableSelectAll(false)\n        }\n    }, [selectedCharacterObjects])\n\n    return (\n        <div className=\"row character-buttons\">\n            <div className=\"col-12\">\n                <div className=\"row my-3\">\n                    <div className=\"col-xs-12 col-sm-6 text-xs-center text-sm-left\">\n                        <h5 className=\"card-title\">{name} Characters</h5>\n                    </div>\n                    <div className=\"col-xs-12 col-sm-6 text-xs-center text-sm-right\">\n                        <button className=\"btn btn-secondary mr-2\" disabled={disableSelectAll} onClick={() => handleSelectClick(true)}>\n                            Select All\n                        </button>\n                        <button className=\"btn btn-outline-secondary ml-2\" disabled={disableDeselectAll} onClick={() => handleSelectClick(false)}>\n                            Deselect All\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-12 text-center\">\n                <div className=\"form-group\">\n                    {selectedCharacterObjects && selectedCharacterObjects.map(charObj => (\n                        <button className={`btn character ${charObj.selected ? 'btn-secondary' : 'btn-outline-secondary'}`} key={charObj.character} onClick={() => handleCharacterClick(charObj)}>\n                            {charObj.character}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CharacterButtons\n","// import dependencies\nimport React, { useState } from 'react'\n\nconst PasswordLength = props => {\n    // state hook varialbes\n    const [strength, setStrength] = useState('text-success')\n    const [numberValue, setNumberValue] = useState(16)\n    const [rangeValue, setRangeValue] = useState(16)\n\n    // destructure props\n    const { liftState } = props\n\n    const handleNumberBlur = e => {\n        // destructure event\n        const { value } = e.target\n\n        // update state\n        if (value < 8) {\n            setNumberValue(8)\n        } else if (value > 128) {\n            setNumberValue(128)\n        }\n    }\n\n    const handleNumberChange = e => {\n        // destructure event\n        const { value } = e.target\n\n        if (!value) {\n            // update state\n            setStrength('text-danger')\n            setNumberValue('')\n            setRangeValue(8)\n\n            // lift state\n            liftState(8)\n        } else if (value < 8) {\n            // update state\n            setStrength('text-danger')\n            setNumberValue(value)\n            setRangeValue(8)\n\n            // lift state\n            liftState(8)\n        } else if (value < 12) {\n            // update state\n            setStrength('text-danger')\n            setNumberValue(value)\n            setRangeValue(value)\n\n            // lift state\n            liftState(value)\n        } else if (value < 16) {\n            // update state\n            setStrength('text-warning')\n            setNumberValue(value)\n            setRangeValue(value)\n\n            // lift state\n            liftState(value)\n        } else if (value > 128) {\n            // update state\n            setStrength('text-success')\n            setNumberValue(value)\n            setRangeValue(128)\n\n            // lift state\n            liftState(128)\n        } else {\n            // update state\n            setStrength('text-success')\n            setNumberValue(value)\n            setRangeValue(value)\n\n            // lift state\n            liftState(value)\n        }\n    }\n\n    const handleRangeChange = e => {\n        // destructure event\n        const { value } = e.target\n\n        // lift state\n        liftState(value)\n\n        // update state\n        setNumberValue(value)\n        setRangeValue(value)\n        if (value < 12) {\n            setStrength('text-danger')\n        } else if (value < 16) {\n            setStrength('text-warning')\n        } else {\n            setStrength('text-success')\n        }\n    }\n\n    return (\n        <div className=\"row my-4 password-length\">\n            <div className=\"col text-left\">\n                <label htmlFor=\"password-length\">\n                    <span>Password Length:</span>\n                    <input\n                        className={`form-control ${strength}`}\n                        min=\"8\"\n                        max=\"128\"\n                        onBlur={handleNumberBlur}\n                        onChange={handleNumberChange}\n                        type=\"number\"\n                        value={numberValue}\n                    />\n                </label>\n                <input\n                    className=\"custom-range\"\n                    id=\"password-length\"\n                    min=\"8\"\n                    max=\"128\"\n                    onChange={handleRangeChange}\n                    type=\"range\"\n                    value={rangeValue}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default PasswordLength\n","// import dependencies\nimport React, {\n\tuseEffect,\n\tuseRef,\n\tuseState\n} from 'react'\nimport {\n\tlowerCaseCharacters,\n\tnumericCharacters,\n\tspecialCharacters,\n\tupperCaseCharacters,\n} from './characters'\nimport shuffle from './shuffle'\n\n// import components\nimport CharacterButtons from './CharacterButtons'\nimport PasswordLength from './PasswordLength'\n\n// import images\nimport logo from './logo.svg'\n\n// import styles\nimport './styles.css'\n\nconst App = () => {\n\t// state hook variables\n\tconst [copyButtonText, setCopyButtonText] = useState('Copy to Clipboard')\n\tconst [password, setPassword] = useState('')\n\tconst [passwordLength, setPasswordLength] = useState(16)\n\tconst [scrollHeight, setScrollHeight] = useState(0)\n\tconst [selectedCharacters, setSelectedCharacters] = useState([])\n\tconst [selectedLowerCaseCharacters, setSelectedLowerCaseCharacters] = useState([])\n\tconst [selectedNumericCharacters, setSelectedNumericCharacters] = useState([])\n\tconst [selectedSpecialCharacters, setSelectedSpecialCharacters] = useState([])\n\tconst [selectedUpperCaseCharacters, setSelectedUpperCaseCharacters] = useState([])\n\n\t// ref hook varialbes\n\tconst passwordRef = useRef(null)\n\n\t// utility variables\n\tconst date = new Date()\n\n\tconst handleCopyClick = e => {\n\t\t// select the contents of the password text area \n\t\tpasswordRef.current.select()\n\n\t\t// replace the clipboard's current content\n\t\tdocument.execCommand('copy')\n\n\t\t// maintain focus on button\n\t\te.target.focus()\n\n\t\t// update state\n\t\tsetCopyButtonText('Copied!')\n\t\tsetTimeout(() => {\n\t\t\tsetCopyButtonText('Copy to Clipboard')\n\t\t  }, 5000)\n\t}\n\n\tconst handleGenerateClick = () => generatePassword()\n\n\tconst generatePassword = () => {\n\t\tlet password = []\n\n\t\tfor (let i = 0; i < passwordLength; i++) {\n\t\t\t// generate a random number\n\t\t\tconst randomIndex = Math.floor(Math.random() * selectedCharacters.length)\n\n\t\t\t// select element from selected characters\n\t\t\tconst randomCharacter = selectedCharacters[randomIndex]\n\n\t\t\t// add selected character to password\n\t\t\tpassword.push(randomCharacter)\n\t\t}\n\n\t\tsetPassword(password.join(''))\n\t}\n\n\t// update selected characters when user input changes\n\tuseEffect(() => {\n\t\t// shuffle selected characters\n\t\tconst shuffledSelectedCharacters = shuffle([\n\t\t\t...selectedLowerCaseCharacters,\n\t\t\t...selectedNumericCharacters,\n\t\t\t...selectedSpecialCharacters,\n\t\t\t...selectedUpperCaseCharacters\n\t\t])\n\n\t\t// update state\n\t\tsetSelectedCharacters(shuffledSelectedCharacters)\n\t}, [selectedLowerCaseCharacters, selectedNumericCharacters, selectedSpecialCharacters, selectedUpperCaseCharacters])\n\n\t// update password when user input changes\n\tuseEffect(() => {\n\t\tgeneratePassword()\n\t\tsetCopyButtonText('Copy to Clipboard')\n\t}, [passwordLength, selectedCharacters])\n\n\t// reset scroll height when password changes\n\tuseEffect(() => {\n\t\tsetScrollHeight(0)\n\t}, [password])\n\n\t// calculate scroll height whenever its value changes\n\tuseEffect(() => {\n\t\tsetScrollHeight(passwordRef.current.scrollHeight)\n\t}, [scrollHeight])\n\n\treturn (\n\t\t<div id=\"app\">\n\t\t\t<div className=\"container my-3\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t\t\t<div className=\"card-header\">\n\t\t\t\t\t\t\t\t<img alt=\"logo\" className=\"logo\" src={logo} />\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Secure Password Generator</h5>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<div className=\"row generate-password\">\n\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Your New Password:</h5>\n\t\t\t\t\t\t\t\t\t\t<textarea readOnly ref={passwordRef} value={password} style={{ height: scrollHeight }}></textarea>\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary mx-2 my-3\" onClick={handleGenerateClick}>\n\t\t\t\t\t\t\t\t\t\t\tGenerate Password\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-outline-primary mx-2 my-3\" onClick={handleCopyClick}>\n\t\t\t\t\t\t\t\t\t\t\t{copyButtonText}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<PasswordLength liftState={setPasswordLength} />\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={lowerCaseCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Lower Case\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedLowerCaseCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={upperCaseCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Upper Case\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedUpperCaseCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={numericCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Numeric\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedNumericCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<CharacterButtons\n\t\t\t\t\t\t\t\t\tcharacters={specialCharacters}\n\t\t\t\t\t\t\t\t\tname={\"Special\"}\n\t\t\t\t\t\t\t\t\tliftState={setSelectedSpecialCharacters}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"card-footer text-muted\">\n\t\t\t\t\t\t\t\t© {date.getFullYear()} IC, LLC\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.02852ab0.svg\";"],"sourceRoot":""}